Project ανάπτυξης λογισμικού για αλγοριθμικά προβλήματα εργασία 2η.

Στοιχεία φοιτητή:	Όνομα: Αντώνιος 
			Επίθετο:Παπαδάκης
			Αριθμός Μητρώου:1115201400141

			Τίτλος και Περιγραφή:

Υλοποίηση δομής για συσταδοποίηση στη γλώσσα C++ η οποία 
επιτυγχάνεται με τη χρήση των μεθόδων range search των LSH και HYPERCUBE με μετρικές αυτές τις ευκλείδιας απόστασης και της ομοιότητας συνιμητόνου καθώς και με τις μεθόδους PAM,k-means,k-means++,Loyds.
	Στην υλοποίηση μου έχω χρησιμοποιήσει seperate compilation καθώς και έχω τηρήσει όλους τους κανόνες απόκρυψης δεδομένων οργανώνοντας των κώδικα μου σε ξεχωριστά header και class files και έχοντας private κομμάτια στις κλάσεις που δημιούργησα. Έχει γίνει χρήση της STL της C++ και κυρίως των template της <vector> και
<unordered set>. Το <unordered set> αποτελεί και το είδος του hashtable που χρησιμοποίησα για το LSH. Για την υλοποίηση μου έχω χρησιμοποίησει και στοιχεία της C++11 οπότε καλό θα ήταν ο υπολογιστής που θα δοκιμαστεί να έχει την τελευταία έκδοση της C++. Στον κώδικα υπάρχουν σχόλια για την καθοδήγηση του αναγνώστη.


			Κατάλογος αρχείων κώδικα:

1)LSH.cpp : αρχείο πηγαίου κώδικα από το οποίο προκύπτει το εκτελέσιμο για την εκτέλεση του αλγορίθμου lsh με τον τρόπο που περιγράφεται στην εκφώνηση. Εδώ γίνεται η επεjεργασία των αρχείων εισόδου dataset και τον αρχείων αναζήτησης queries, από τα οποία πέρνουμε τα απαραίτητα στοιχεία για τη δημιουργία των δομών αλλά και για την αναζήτηση σε αυτές. Επίσης εδώ γίνεται η κλήση των συναρτήσεων και η δημιουργία των βοηθητικών δομών που έχω δημιουργήσει στους υπόλοιπους καταλόγους και κλάσεις. Εδώ γίνεται και το γράψιμο στην έξοδο αλλά και η αποδέσμευση της όποιας δεσμευμένης μνήμης.

2)item.h : Βασικό αρχείο επικεφαλίδα με δήλωση της κλάσης item στην οποία έχουν οριστεί όλες οι συναρτήσεις και οι μεταβλητές που αφορούν το hashing των διανυσμάτων την λειτουργία των μετρικών, τον υπολογισμό των συναρτήσεων hi για ευκλείδια και cosine μετρική, για τον υπολογισμό των διανυσμάτων V και t τα οποία κρατούνται στην κλάση όπως ζητήθηκε, των υπολογισμό των g και φ->(f) για τα buckets.

3)item.cpp : Αντίστοιχο αρχείο πηγαίου κώδικα της επικεφαλίδας item.h στο οποίο γίνεται η ανάλυση των συναρτήσεων της item και υπάρχουν και ορισμένες βοηθητικές συναρτήσεις για την παραγωγή τυχαίων αριθμών για την επιστροφή private στοιχείων κα.

4) cosine.h : αρχείο επικεφαλίδα με τον ορισμό των hash συναρτήσεων για την μέθοδο LSH με την cosine μετρική και ορισμό συνάρτησης για τον υπολογισμό της cosine απόστασης σύμφωνα με διαφάνειες. 

5) cosine.cpp : αρχείο αντίστοιχο πηγαίου κώδικα με την cosine distance συνάρτηση.

6) euclidean.h : αρχείο επικεφαλίδα με τον ορισμό των hash συναρτήσεων για την μέθοδο LSH με την euclidean μετρική και ορισμό συνάρτησης για τον υπολογισμό της cosine απόστασης σύμφωνα με διαφάνειες. 

7) euclidean.cpp : αρχείο αντίστοιχο πηγαίου κώδικα με την euclidean distance συνάρτηση.

8) cube.cpp : αρχείο πηγαίου κώδικα όπου γίνεται η εκτέλεση της μεθόδου του υπερκύβου για να βρεθούν τα ζητούμενα. Έχει ανάλογη μορφή με το LSH.cpp. 

9) hyper.h : αρχείο επικεφαλίδα με τον ορισμό των συναρτήσεων και της κλάσης για την μέθοδο hypercube που είναι απαραίτητες για την εκτέλεση μας.  

10) hyper.cpp : αρχείο πηγαίου κώδικα με υλοποίηση για τις συναρτήσεις που ορίζονται στο αντίστοιχο αρχείο επικεφαλίδα καθώς και με υλοποίηση συνάρτησης για τον υπολογισμό της hamming distance . Υπάρχει σε αυτό σχολιασμένη και υλοποίηση για να βρίσκεται hamming distance και για double δεδομένα ώστε να υπάρχει και η δυνατότητα επεκτασιμότητας σε double που ζητάτε.

11)argClass.cpp συνάρτηση για χειρισμό ορισμάτων ώστε να μη γίνεται στη main

12)argClass.h αντίστοιχη βιβλιοθήκη

13)assignment.cpp εδώ βρίσκονται όλες οι συναρτήσεις για το assignment και το update

14)assignment.h αντίστοιχη βιβλιοθήκη (κλάση)

15)cluster.cpp η main.

16)makefile




			Οδηγίες Μεταγλώτισσης του προγράμματος:

η μεταγλώττιση γίνεται κάνοντας make στον φάκελο που έχετε βάλει όλα τα αρχεία πηγαίου κώδικα και τις επικεφαλίδες. Γλώσσα η τελευταία έκδοση της c++.

			Οδηγίες χρήσης του προγράμματος:

Η κλήση του προγράμματος μπορεί να γίνει όπως αναφέρεται στην εκφώνηση είτε 


./cluster -i input.csv -d euclidean -c cluster.conf -o out 


και γενικά έχω ακολουθήσει την εκφώνηση σε ότι αφορα τις παραμέτρους πχ R,c κλπ.

			Αποτελέσματα εκτέλεσης:

Αριθμημένες όπως τις έχω και στον κώδικα

Μέθοδοι:	

1:Algorithm: I1A1U1
clustering time: 1e-06 silhouette: [-0.187197,-0.0117824,0.0154758,0.0320184,-0.089696,-0.0532486,-0.140706,-0.0194059,-0.0122626,0.106696,0.0660602,-0.0904469,0.0488132,0.0468258,0.0846416,0]


		
2:Algorithm: I1A2U1
 
 clustering time: 45.6952
silhouette: [0.013282,0.0143979,0.0104864,0.0121618,0.0139476,0.00972957,0.00349675,0.0131889,0.012104,0.0114376,0.000155019,0.0147352,0.0139881,0.00887083,0.0155511,0.0111689]



		
3Algorithm: I1A3U1
clustering time: 3e-06
silhouette: [0.013282,0.0143979,0.0104864,0.0121618,0.0139476,0.00972957,0.00349675,0.0131889,0.012104,0.0114376,0.000155019,0.0147352,0.0139881,0.00887083,0.0155511,0.0111689]


		
4:Algorithm: I1A1U2
 clustering time: 1e-06
silhouette:[0.013282,0.0143979,0.0104864,0.0121618,0.0139476,0.00972957,0.00349675,0.0131889,0.012104,0.0114376,0.000155019,0.0147352,0.0139881,0.00887083,0.0155511,0.0111689]


		
5:Algorithm: I1A2U2
 clustering time: 3e-06
silhouette: [0.013282,0.0143979,0.0104864,0.0121618,0.0139476,0.00972957,0.00349675,0.0131889,0.012104,0.0114376,0.000155019,0.0147352,0.0139881,0.00887083,0.0155511,0.0111689]
		
		
6:Algorithm: I1A3U2
clustering time: 3e-06
silhouette: [0.013282,0.0143979,0.0104864,0.0121618,0.0139476,0.00972957,0.00349675,0.0131889,0.012104,0.0114376,0.000155019,0.0147352,0.0139881,0.00887083,0.0155511,0.0111689]

		
7:Algorithm: I2A1U1
 clustering time: 5.05026
silhouette: [-0.187197,-0.0117824,0.0154758,0.0320184,-0.089696,-0.0532486,-0.140706,-0.0194059,-0.0122626,0.106696,0.0660602,-0.0904469,0.0488132,0.0468258,0.0846416,4.66412e-310]


	
8:Algorithm: I2A2U1
 clustering time: 110.349
silhouette: [0.0232377,0.00960291,0.000160415,0.16238,0.0354479,0.162323,0.581161,0.114536,0.0183504,0.158457,0.133205,0.0583951,0.00581197,0.126638,0.0232607,0.107531]

		
9:Algorithm: I2A3U1

 clustering time: 2e-06
silhouette: [0.0232377,0.00960291,0.000160415,0.16238,0.0354479,0.162323,0.581161,0.114536,0.0183504,0.158457,0.133205,0.0583951,0.00581197,0.126638,0.0232607,0.107531]

		
10:Algorithm: I2A1U2
clustering time: 1e-06
silhouette: [0.0232377,0.00960291,0.000160415,0.16238,0.0354479,0.162323,0.581161,0.114536,0.0183504,0.158457,0.133205,0.0583951,0.00581197,0.126638,0.0232607,0.107531]


		
11:Algorithm: I2A2U2
clustering time: 2e-06
silhouette: [0.0232377,0.00960291,0.000160415,0.16238,0.0354479,0.162323,0.581161,0.114536,0.0183504,0.158457,0.133205,0.0583951,0.00581197,0.126638,0.0232607,0.107531]


		
12:Algorithm: I2A3U2
 clustering time: 2e-06
silhouette: [0.0232377,0.00960291,0.000160415,0.16238,0.0354479,0.162323,0.581161,0.114536,0.0183504,0.158457,0.133205,0.0583951,0.00581197,0.126638,0.0232607,0.107531]

		


Βλέπουμε λοιπόν ότι :

με βάση τις silhouette η μέθοδος που έχει τιμές στα clusters κοντινότερες στο 1 είναι και η πιο αποδοτική από πλευράς ακρίβειας επομένως μιλάμε για τις μεθόδους 8 έως 12. Βλέπουμε όμως ότι απαιτούν περισσότερο χρόνο σε σχέση με τις υπόλοιπες όχι όμως για κάποια μεγάλη ποσότητα. Η διαφορά των τελευταιων (8-12) είναι περιπου της τάξης του 10 με τις άλλες όσων αφορά τη silhouette. Ο χρόνος διαφέρει περίπου για +1 στον εκθέτη 1e με 2e ή 3e.



Όλα αυτά εξηγούνται και από τις πολυπλοκότητες της κάθε μεθόδου.























